import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import os
import threading
import logging
from dotenv import load_dotenv
import time
import random
from datetime import datetime, timedelta, timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(asctime)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("API_TOKEN")
if not TOKEN:
    logging.error("–û—à–∏–±–∫–∞: API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
    exit()
bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤
data_file = 'players.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
if os.path.exists(data_file):
    with open(data_file, 'r') as f:
        players = json.load(f)
else:
    players = {}

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_click_time = {}

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –∏ –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
DAILY_FUEL = 10000
DAILY_TICKET_LIMIT = 20

def save_data():
    try:
        with open(data_file, 'w') as f:
            json.dump(players, f, indent=4)
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_player(user_id):
    if str(user_id) not in players:
        players[str(user_id)] = {
            "balance": 0,
            "power": 1,
            "referrals": 0,
            "boost": False,
            "race_ticket": False,
            "fuel": DAILY_FUEL,
            "last_fuel_update": datetime.now(timezone.utc).isoformat(),
            "ticket_purchases": 0,
            "last_ticket_update": datetime.now(timezone.utc).isoformat()
        }
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫: {user_id}")
    return players[str(user_id)]

def update_fuel_and_tickets(player):
    last_fuel_update = datetime.fromisoformat(player["last_fuel_update"])
    last_ticket_update = datetime.fromisoformat(player["last_ticket_update"])
    now = datetime.now(timezone.utc)
    
    if (now - last_fuel_update).days >= 1:
        player["fuel"] = DAILY_FUEL
        player["last_fuel_update"] = now.isoformat()
        logging.info(f"–¢–æ–ø–ª–∏–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player}")
    
    if (now - last_ticket_update).days >= 1:
        player["ticket_purchases"] = 0
        player["last_ticket_update"] = now.isoformat()
        logging.info(f"–õ–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player}")

def get_main_keyboard(user_id):
    player = get_player(user_id)
    update_fuel_and_tickets(player)
    if not player:
        return None, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞."
    upgrade_cost = player["power"] * 10
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöÄ –ì–∞–∑ –≤ –ø–æ–ª!", callback_data='earn'))
    keyboard.add(InlineKeyboardButton("üõ† –ê–ø–≥—Ä–µ–π–¥—ã", callback_data='upgrade'))
    keyboard.add(InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'))
    keyboard.add(InlineKeyboardButton("üèé –ì–æ–Ω–∫–∏", callback_data='race'))
    stats = f"üí∞ –ë–∞–ª–∞–Ω—Å: {player['balance']} | üöõ –ú–æ—â–Ω–æ—Å—Ç—å: {player['power']}\nüîß –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost} –º–æ–Ω–µ—Ç\n‚ö° –ë—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if player['boost'] else '‚ùå'} | üéü –ë–∏–ª–µ—Ç –Ω–∞ –≥–æ–Ω–∫–∏: {'‚úÖ' if player['race_ticket'] else '‚ùå'}\n‚õΩ –¢–æ–ø–ª–∏–≤–æ: {player['fuel']} | üõí –ü–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤: {player['ticket_purchases']}/{DAILY_TICKET_LIMIT}"
    return keyboard, stats

def is_cooldown_over(user_id, cooldown=1.5):
    current_time = time.time()
    if user_id in last_click_time:
        elapsed_time = current_time - last_click_time[user_id]
        if elapsed_time < cooldown:
            return False
    last_click_time[user_id] = current_time
    return True

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∏–≥—Ä—É")
    get_player(user_id)
    save_data()
    keyboard, stats = get_main_keyboard(user_id)
    bot.send_message(user_id, f"üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–¢–∞–ø –ú–æ–Ω–µ—Ç—ã: –ó–æ–Ω–∞ –¢—Ä–∞–∫–∞*!\n–¢–∞–ø–∞–π –∫–Ω–æ–ø–∫—É, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–π —Ç—Ä–∞–∫!\n\n{stats}", parse_mode='Markdown', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'earn')
def earn_money(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    player = get_player(user_id)
    update_fuel_and_tickets(player)
    if player["fuel"] <= 0:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
        return
    earnings = player["power"] * (2 if player["boost"] else 1)
    if player["fuel"] < earnings:
        earnings = player["fuel"]
    player["balance"] += earnings
    player["fuel"] -= earnings
    logging.info(f"–ò–≥—Ä–æ–∫ {user_id} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {earnings} –º–æ–Ω–µ—Ç –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª {earnings} —Ç–æ–ø–ª–∏–≤–∞")
    save_data()
    keyboard, stats = get_main_keyboard(user_id)
    bot.answer_callback_query(call.id, f"üí∞ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {earnings} –º–æ–Ω–µ—Ç!")
    bot.edit_message_text(f"üöõ *–¢–∞–ø –ú–æ–Ω–µ—Ç—ã: –ó–æ–Ω–∞ –¢—Ä–∞–∫–∞*\n\n{stats}", user_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'shop')
def shop(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ö° –ö—É–ø–∏—Ç—å –±—É—Å—Ç (100 –º–æ–Ω–µ—Ç)", callback_data='buy_boost'))
    keyboard.add(InlineKeyboardButton("üéü –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç (200 –º–æ–Ω–µ—Ç)", callback_data='buy_ticket'))
    keyboard.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='back'))
    logging.info(f"–ò–≥—Ä–æ–∫ {user_id} –æ—Ç–∫—Ä—ã–ª –º–∞–≥–∞–∑–∏–Ω")
    bot.edit_message_text("üõí –ú–∞–≥–∞–∑–∏–Ω:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", user_id, call.message.message_id, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'buy_boost')
def buy_boost(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    player = get_player(user_id)
    if player["balance"] >= 100:
        player["balance"] -= 100
        player["boost"] = True
        logging.info(f"–ò–≥—Ä–æ–∫ {user_id} –∫—É–ø–∏–ª –±—É—Å—Ç")
        save_data()
        bot.answer_callback_query(call.id, "‚ö° –ë—É—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É!")
        threading.Timer(60, disable_boost, [user_id]).start()
    else:
        logging.warning(f"–ò–≥—Ä–æ–∫—É {user_id} –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –º–æ–Ω–µ—Ç –Ω–∞ –±—É—Å—Ç")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")

def disable_boost(user_id):
    players[str(user_id)]["boost"] = False
    save_data()
    logging.info(f"–ë—É—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω —É –∏–≥—Ä–æ–∫–∞ {user_id}")

@bot.callback_query_handler(func=lambda call: call.data == 'back')
def back_to_main(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    keyboard, stats = get_main_keyboard(user_id)
    logging.info(f"–ò–≥—Ä–æ–∫ {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
    bot.edit_message_text(f"üöõ *–¢–∞–ø –ú–æ–Ω–µ—Ç—ã: –ó–æ–Ω–∞ –¢—Ä–∞–∫–∞*\n\n{stats}", user_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'upgrade')
def upgrade_menu(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    player = get_player(user_id)
    upgrade_cost = player["power"] * 10

    if player["balance"] >= upgrade_cost:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(f"–£–ª—É—á—à–∏—Ç—å (–°—Ç–æ–∏–º–æ—Å—Ç—å: {upgrade_cost})", callback_data='confirm_upgrade'))
        keyboard.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='back'))
        bot.edit_message_text(f" –ê–ø–≥—Ä–µ–π–¥—ã:\n–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å: {player['power']}\n–£–ª—É—á—à–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å?", user_id, call.message.message_id, reply_markup=keyboard)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_upgrade')
def confirm_upgrade(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    player = get_player(user_id)
    upgrade_cost = player["power"] * 10
    player["balance"] -= upgrade_cost
    player["power"] += 1
    save_data()
    keyboard, stats = get_main_keyboard(user_id)
    bot.edit_message_text(f" *–¢–∞–ø –ú–æ–Ω–µ—Ç—ã: –ó–æ–Ω–∞ –¢—Ä–∞–∫–∞*\n\n{stats}", user_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
    bot.answer_callback_query(call.id, " –ú–æ—â–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞!")

@bot.callback_query_handler(func=lambda call: call.data == 'race')
def race(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    player = get_player(user_id)

    if not player["race_ticket"]:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –±–∏–ª–µ—Ç–∞ –Ω–∞ –≥–æ–Ω–∫–∏!")
        return

    if player["balance"] < 200:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è!")
        return

    player["balance"] -= 200
    player["race_ticket"] = False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–ª–µ—Ç
    save_data()

    if random.choice([True, False]):  # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä: True - –ø–æ–±–µ–¥–∞, False - –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        player["balance"] += 400  # –í—ã–∏–≥—Ä—ã—à: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 + 200 –ø—Ä–∏–∑–æ–≤—ã—Ö
        result_message = " –í—ã –ø–æ–±–µ–¥–∏–ª–∏! +200 –º–æ–Ω–µ—Ç!"
    else:
        result_message = " –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -200 –º–æ–Ω–µ—Ç!"

    save_data()
    keyboard, stats = get_main_keyboard(user_id)
    bot.edit_message_text(f" *–¢–∞–ø –ú–æ–Ω–µ—Ç—ã: –ó–æ–Ω–∞ –¢—Ä–∞–∫–∞*\n\n{result_message}\n\n{stats}", user_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
    bot.answer_callback_query(call.id, result_message)

@bot.callback_query_handler(func=lambda call: call.data == 'buy_ticket')
def buy_ticket(call):
    user_id = call.message.chat.id
    if not is_cooldown_over(user_id):
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!")
        return
    player = get_player(user_id)
    update_fuel_and_tickets(player)
    if player["ticket_purchases"] >= DAILY_TICKET_LIMIT:
        bot.answer_callback_query(call.id, "‚ùå –õ–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω!")
        return
    if player["balance"] >= 200:
        player["balance"] -= 200
        player["race_ticket"] = True
        player["ticket_purchases"] += 1
        save_data()
        bot.answer_callback_query(call.id, " –ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!")
        keyboard, stats = get_main_keyboard(user_id)
        bot.edit_message_text(f" *–¢–∞–ø –ú–æ–Ω–µ—Ç—ã: –ó–æ–Ω–∞ –¢—Ä–∞–∫–∞*\n\n{stats}", user_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!")

bot.polling(none_stop=True)